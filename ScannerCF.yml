AWSTemplateFormatVersion: '2010-09-09'
Description: Template to automatically setup Qualys AWS EC2 AWS for Asset Scanning
Metadata:
  Author: "Mikesh Khanal"
  Version: "1.0"
  Updated: "1/11/2018"
  Version Comments: "Adapted from Sham's Template"
Parameters:
  UserName:
    Default: empty
    Description: User Authorized to Create a Qualys Virtual Scanner
    Type: String
  Password:
    Default: empty
    Description: Password of the User Authorized to Create an Qualys Virtual Scanner
    Type: String
    NoEcho: true
  BaseUrl:
    Default: https://qualysapi.qg2.apps.qualys.com
    Description: Base URL of the Qualys Server
    Type: String
  SCANNERNAME:
    Default: Empty
    Description: (Optional) name you want to give to your scanner appliance
    Type: String
  InstanceType:
    Description: Qualys Scanner instance size
    Type: String
    Default: t2.medium
    AllowedValues:
     - t2.medium
     - t2.large
     - m4.large
     - m4.xlarge
     - m3.large
     - m3.xlarge
     - c4.large
     - c4.xlarge
     - c4.2xlarge
     - c3.large
     - c3.xlarge
     - c3.2xlarge
     - r3.large
  Subnets:
    Description: Select subnet to launch scanner in
    Type: AWS::EC2::Subnet::Id

Resources:
  AWSFunction:
    DependsOn: LambdaExecutionRole
    Type: AWS::Lambda::Function
    Properties:
      Environment:
        Variables:
          BASEURL: !Ref BaseUrl
          SCANNERNAME: !Ref SCANNERNAME
          USERNAME: !Ref UserName
          PASSWORD: !Ref Password
      Code:
        ZipFile: !Sub |
          def lambda_handler(event, context):
            import boto3
            import base64
            import logging.config
            import xml.etree.ElementTree as ET
            import cfnresponse
            import os,sys
            import botocore.vendored.requests as requests
            region = context.invoked_function_arn.split(":")[3]
            accountId = context.invoked_function_arn.split(":")[4]
            SCANNERNAME = os.getenv('SCANNERNAME')
            username = os.getenv('USERNAME')
            password = os.getenv('PASSWORD')
            BASEURL = os.getenv('BASEURL')
            ec2 = boto3.client('ec2')
            filters = [{'Name': 'name', 'Values': ['*1b8af947-aa54-4852-9da6-282428ba2f46*']}]
            images = ec2.describe_images(Filters=filters) 
            imagelist = images['Images']
            print ("The number of images for scanner is {}".format(len(imagelist)))
            AMIID = imagelist[0]['ImageId']
            if (len(imagelist)>0):
                imagecreationdate = images['Images'][0]['CreationDate']
                for i in range (len(imagelist)-1):
                    j = 0
                    if imagecreationdate < images['Images'][i]['CreationDate']:
                        imagecreationdate = images['Images'][i]['CreationDate']
                        j = i
                AMIID = images['Images'][j]['ImageId']
            print ("ImageId = {}".format(AMIID))
            usrPass = str(username)+':'+str(password)
            b64Val = base64.b64encode(str(usrPass).encode('ascii'))
            headers = {
            'X-Requested-With' : 'python requests',
            'Authorization': "Basic %s" % b64Val,
            'Content': 'text/xml'
            }
            try:
                rURL = BASEURL + "/api/2.0/fo/appliance/"
                params = {"action":"create","name":SCANNERNAME}
                print ("URl =  {}".format(rURL))
                print ("Body =  {}".format(params))
                print("Headers = {}".format(headers))            
                qurl = requests.post(rURL,  params=params, headers=headers)
                print ("The status code = {}".format(qurl.status_code))
                #qurl = 'curl -v -u {}:{} -H "X-Requested-With:Curl" -X "POST" -d "action=create&echo_request=1&name={}" "{}/api/2.0/fo/appliance/"'.format(username, password,SCANNERNAME,BASEURL)
                #result = os.popen(qurl).read()
                print ("XML = {}".format((qurl.text)))
                tree = ET.fromstring(qurl.text)
                if (tree.find('RESPONSE/CODE') is None):             
                    PERS = tree.find('RESPONSE/APPLIANCE/ACTIVATION_CODE').text
                    responseData = {}
                    responseData['PERS'] = PERS
                    responseData['AMIID'] = AMIID
                else:
                    print("The Error code {}:{}".format(tree.find('RESPONSE/CODE').text,tree.find('RESPONSE/TEXT').text))
                    exit(0)
            except IOError as e:
                print ("Status with error {1}: {2}".format(e.errno, e.strerror))
            cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
      Description: Lambda Function to create a Qualys Virtual Scanner in QCP
      Handler: index.lambda_handler
      Role: !GetAtt 'LambdaExecutionRole.Arn'
      Runtime: python3.6
      Timeout: '120'
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - iam:CreateRole
                Resource: '*'
              - Effect: Allow
                Action:
                  - ec2:Describe*
                Resource: '*'
  MyEC2:
    DependsOn: AWSFunction
    Type: "AWS::EC2::Instance"
    Properties:
     ImageId: !GetAtt 'CustomResource.AMIID'
     SubnetId: !Ref Subnets
     InstanceType: !Ref InstanceType
     UserData:
      Fn::Base64: !Sub |
       PERSCODE=${CustomResource.PERS}
       
  CustomResource:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !GetAtt 'AWSFunction.Arn'
Outputs:
  PERS:
    Description: Personalization Code.
    Value: !GetAtt 'CustomResource.PERS'